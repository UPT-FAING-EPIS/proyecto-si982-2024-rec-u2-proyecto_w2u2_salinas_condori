@model List<LoopifyFinal.Models.Producto>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var categorias = ViewBag.Categorias as List<LoopifyFinal.Models.Categoria>;
    var subcategorias = ViewBag.Subcategorias as List<LoopifyFinal.Models.Subcategoria>;
}

<div class="container mt-4">
    <h2 class="text-center mb-4" style="color: #00A79D;">Gestión de Productos</h2>

    <!-- Selector de negocios -->
    <div class="form-group mb-4">
        <label for="negocioSelector" class="form-label">Seleccionar Negocio</label>
        <select id="negocioSelector" class="form-select" onchange="cambiarNegocio(this.value)">
            <option value="">Seleccione un negocio</option>
            @foreach (var negocio in ViewBag.Negocios ?? new List<LoopifyFinal.Models.Negocio>())
            {
                <option value="@negocio.Id" @(ViewBag.NegocioSeleccionado != null && ViewBag.NegocioSeleccionado.Id == negocio.Id ? "selected" : "")>
                    @negocio.Nombre
                </option>
            }
        </select>
    </div>

    <!-- Información del negocio seleccionado -->
    @if (ViewBag.NegocioSeleccionado != null)
    {
        <div class="card mb-4" style="position: relative;">
            <img src="@ViewBag.NegocioSeleccionado.Banner" class="card-img-top" alt="Banner" style="height: 400px; object-fit: cover;">

            <!-- Categorías y Subcategorías -->
            <div style="position: absolute; top: 15px; left: 15px; display: flex; gap: 10px;">
                <!-- Categoría -->
                <div style="background-color: #00A79D; color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.9rem;">
                    @(ViewBag.CategoriasDict != null && ViewBag.CategoriasDict.ContainsKey(ViewBag.NegocioSeleccionado.CategoriaId)
                ? ViewBag.CategoriasDict[ViewBag.NegocioSeleccionado.CategoriaId]
                : "Sin Categoría")
                </div>

                <!-- Subcategoría 1 -->
                @if (ViewBag.NegocioSeleccionado.Subcategoria1Id != null
                     && ViewBag.SubcategoriasDict != null
                     && ViewBag.SubcategoriasDict.ContainsKey((int)ViewBag.NegocioSeleccionado.Subcategoria1Id))
                {
                    <div style="background-color: #FF5733; color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.9rem;">
                        @ViewBag.SubcategoriasDict[(int)ViewBag.NegocioSeleccionado.Subcategoria1Id]
                    </div>
                }

                <!-- Subcategoría 2 -->
                @if (ViewBag.NegocioSeleccionado.Subcategoria2Id != null
                     && ViewBag.SubcategoriasDict != null
                     && ViewBag.SubcategoriasDict.ContainsKey((int)ViewBag.NegocioSeleccionado.Subcategoria2Id))
                {
                    <div style="background-color: #FFC300; color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.9rem;">
                        @ViewBag.SubcategoriasDict[(int)ViewBag.NegocioSeleccionado.Subcategoria2Id]
                    </div>
                }
            </div>

            <div style="position: absolute; bottom: 140px; left: 15px; display: flex; align-items: center; gap: 15px;">
                <img src="@ViewBag.NegocioSeleccionado.Logo" class="rounded-circle" alt="Logo"
                     style="width: 150px; height: 150px; object-fit: cover; border: 2px solid white;">
                <div>
                    <h4 style="font-weight: bold; font-size: 1.5rem; margin: 0;">@ViewBag.NegocioSeleccionado.Nombre</h4>
                </div>
            </div>
            <div class="card-body text-left" style="margin-top: 90px;">
                <p class="text-muted" style="font-size: 1.2rem; text-align: justify; margin-bottom: 15px;">
                    @ViewBag.NegocioSeleccionado.Descripcion
                </p>
                <p class="text-muted" style="font-size: 1rem; text-align: left; margin-bottom: 5px;">
                    <strong>Dirección:</strong> @ViewBag.NegocioSeleccionado.Direccion
                </p>
                <p class="text-muted" style="font-size: 1rem; text-align: left;">
                    <strong>Ubicación:</strong>
                    <a href="@ViewBag.NegocioSeleccionado.Ubicacion" target="_blank" style="color: #007bff; text-decoration: none;">
                        Ubicación Aquí 👈
                    </a>
                </p>
            </div>
        </div>

        <!-- Productos del negocio -->
        <div id="productosSection">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#agregarProductoModal" data-id="@ViewBag.NegocioSeleccionado?.Id">
                    <i class="bi bi-plus-circle"></i> Añadir Producto
                </button>
            </div>

            @if (Model != null && Model.Any())
            {
                <ul class="list-group">
                    @foreach (var producto in Model)
                    {
                        <li class="list-group-item d-flex align-items-center">
                            <!-- Mostrar múltiples imágenes -->
                            @if (!string.IsNullOrEmpty(producto.Imagen))
                            {
                                var imagenes = producto.Imagen.Split(',');
                                if (imagenes.Length == 1)
                                {
                                    <img src="@imagenes[0]" alt="Imagen del producto" class="rounded" style="width: 60px; height: 60px; object-fit: cover; margin-right: 15px;">
                                }
                                else
                                {
                                    <div id="carouselProducto@producto.Id" class="carousel slide" data-bs-ride="carousel" style="max-width: 150px; margin: 20px 20px 20px 0;">
                                        <div class="carousel-inner" style="width: 150px; height: 150px;">
                                            @for (int i = 0; i < imagenes.Length; i++)
                                            {
                                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                                    <img src="@imagenes[i]" class="d-block w-100 rounded" alt="Imagen del producto"
                                                         style="max-width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">
                                                </div>
                                            }
                                        </div>
                                        @if (imagenes.Length > 1)
                                        {
                                            <div class="carousel-indicators" style="bottom: -10px;">
                                                @for (int i = 0; i < imagenes.Length; i++)
                                                {
                                                    <button type="button" data-bs-target="#carouselProducto@producto.Id" data-bs-slide-to="@i"
                                                            class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")"></button>
                                                }
                                            </div>
                                        }
                                    </div>

                                }
                            }


                            <div class="flex-grow-1">
                                <strong>@producto.Nombre</strong><br>
                                <small>Precio Original: S./ @producto.PrecioOriginal</small>

                                @if (producto.PrecioDescuento < producto.PrecioOriginal)
                                {
                                    <br>
                                    <small>Porcentaje de Descuento: @Math.Round((1 - (producto.PrecioDescuento / producto.PrecioOriginal)) * 100, 2)%</small><br>
                                    <small>Descuento Aplicado: S./ @Math.Round(producto.PrecioOriginal - producto.PrecioDescuento, 2)</small><br>
                                    <small>Precio con Descuento: S./ @producto.PrecioDescuento</small>
                                }

                                @if (producto.PorExpirar && producto.FechaExpiracion.HasValue)
                                {
                                    <br>
                                    <small style="color: red;">Vence el: @producto.FechaExpiracion.Value.ToString("dd/MM/yyyy")</small>
                                }

                                @if (!string.IsNullOrWhiteSpace(producto.Descripcion))
                                {
                                    <br>
                                    <small>Descripción: @producto.Descripcion</small>
                                }
                            </div>
                            <div>
                                <button class="btn btn-warning btn-sm text-white" data-bs-toggle="modal" data-bs-target="#editarProductoModal"
                                        data-id="@producto.Id"
                                        data-nombre="@producto.Nombre"
                                        data-descripcion="@producto.Descripcion"
                                        data-preciooriginal="@producto.PrecioOriginal"
                                        data-porcentajeDescuento="@Math.Round((1 - (producto.PrecioDescuento / producto.PrecioOriginal)) * 100, 2)"
                                        data-fechaExpiracion="@producto.FechaExpiracion?.ToString(" yyyy-MM-dd")"
                                        data-imagen="@producto.Imagen">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <!-- Botón para eliminar producto -->
                                <button type="button" class="btn btn-danger btn-sm" onclick="confirmarEliminar(@producto.Id)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="alert alert-info text-center">
                    Aún no hay productos añadidos.
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <strong>No se ha seleccionado ningún negocio.</strong>
            <p>Por favor, seleccione un negocio para gestionar sus productos.</p>
        </div>
    }
</div>

<!-- Modal para añadir producto -->
<div class="modal fade" id="agregarProductoModal" tabindex="-1" aria-labelledby="agregarProductoLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="background-color: #f8f9fa; border-radius: 10px;">
            <div class="modal-header" style="background-color: #00A79D; color: white; border-top-left-radius: 10px; border-top-right-radius: 10px;">
                <h5 class="modal-title" id="agregarProductoLabel">Añadir Producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="/Vendedor/AgregarProducto" enctype="multipart/form-data">
                <input type="hidden" id="negocioIdModal" name="negocioId" value="@(ViewBag.NegocioSeleccionado?.Id ?? 0)" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre del Producto</label>
                        <input type="text" class="form-control" id="nombre" name="nombre" required />
                    </div>
                    <div class="mb-3">
                        <label for="descripcion" class="form-label">Descripción</label>
                        <textarea class="form-control" id="descripcion" name="descripcion" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="precioOriginal" class="form-label">Precio Original</label>
                        <input type="number" class="form-control" id="precioOriginal" name="precioOriginal" step="0.01" required />
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="porExpirar" name="porExpirar" />
                        <label class="form-check-label" for="porExpirar">Por Expirar</label>
                    </div>
                    <div class="mb-3" id="fechaExpiracionGroup" style="display: none;">
                        <label for="fechaExpiracion" class="form-label">Fecha de Expiración</label>
                        <input type="date" class="form-control" id="fechaExpiracion" name="fechaExpiracion" />
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="descuento" name="descuento" />
                        <label class="form-check-label" for="descuento">Descuento</label>
                    </div>
                    <div class="mb-3" id="descuentoGroup" style="display: none;">
                        <label for="porcentajeDescuento" class="form-label">Porcentaje de Descuento (%)</label>
                        <input type="number" class="form-control" id="porcentajeDescuento" name="porcentajeDescuento" step="0.01" />
                        <div class="mt-2" id="detalleDescuento">
                            <strong>Precio Original:</strong> S./ <span id="precioOriginalLabel">0.00</span><br />
                            <strong>Descuento:</strong> <span id="porcentajeDescuentoLabel">0%</span> (S./ <span id="montoDescuentoLabel">0.00</span>)<br />
                            <strong>Precio Final:</strong> S./ <span id="precioFinalLabel">0.00</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="imagenesProducto" class="form-label">Imágenes del Producto</label>
                        <input type="file" class="form-control" id="imagenesProducto" accept="image/*" multiple onchange="previsualizarImagenesAñadir(this)" />
                        <div id="previsualizacionAgregar" class="d-flex flex-wrap mt-3 gap-2">
                            <!-- Previsualización de imágenes -->
                        </div>
                    </div>
                    <!-- Campo oculto para almacenar las imágenes seleccionadas -->
                    <input type="hidden" id="imagenesSeleccionadas" name="imagenesSeleccionadas" />

                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Guardar Producto</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal para editar producto -->
<div class="modal fade" id="editarProductoModal" tabindex="-1" aria-labelledby="editarProductoLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editarProductoLabel">Editar Producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="formEditarProducto" method="post" action="/Vendedor/EditarProducto" enctype="multipart/form-data">
                <input type="hidden" id="productoIdEditar" name="id" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nombreEditar" class="form-label">Nombre del Producto</label>
                        <input type="text" class="form-control" id="nombreEditar" name="nombre" required />
                    </div>
                    <div class="mb-3">
                        <label for="descripcionEditar" class="form-label">Descripción</label>
                        <textarea class="form-control" id="descripcionEditar" name="descripcion" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="precioOriginalEditar" class="form-label">Precio Original</label>
                        <input type="number" class="form-control" id="precioOriginalEditar" name="precioOriginal" step="0.01" required />
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="descuentoEditar" name="descuento" />
                        <label class="form-check-label" for="descuentoEditar">¿Aplicar Descuento?</label>
                    </div>
                    <div class="mb-3" id="descuentoGroupEditar" style="display: none;">
                        <label for="porcentajeDescuentoEditar" class="form-label">Porcentaje de Descuento (%)</label>
                        <input type="number" class="form-control" id="porcentajeDescuentoEditar" name="porcentajeDescuento" step="0.01" />
                        <div class="mt-2" id="detalleDescuentoEditar">
                            <strong>Precio Original:</strong> S./ <span id="precioOriginalLabelEditar">0.00</span><br />
                            <strong>Descuento:</strong> <span id="porcentajeDescuentoLabelEditar">0%</span> (S./ <span id="montoDescuentoLabelEditar">0.00</span>)<br />
                            <strong>Precio Final:</strong> S./ <span id="precioFinalLabelEditar">0.00</span>
                        </div>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="porExpirarEditar" name="porExpirar" />
                        <label class="form-check-label" for="porExpirarEditar">¿Por Expirar?</label>
                    </div>
                    <div class="mb-3" id="fechaExpiracionGroupEditar" style="display: none;">
                        <label for="fechaExpiracionEditar" class="form-label">Fecha de Expiración</label>
                        <input type="date" class="form-control" id="fechaExpiracionEditar" name="fechaExpiracion" />
                    </div>
                    <div class="mb-3">
                        <label for="imagenesProductoEditar" class="form-label">Imágenes del Producto</label>
                        <input type="file" class="form-control" id="imagenesProductoEditar" name="nuevasImagenes" accept="image/*" multiple onchange="previsualizarImagenesEditar(this)" />

                        <!-- Contenedor de previsualización -->
                        <div id="previsualizacionEditar" class="d-flex flex-wrap mt-3 gap-2">
                            @if (Model != null && !string.IsNullOrEmpty(Model.FirstOrDefault()?.Imagen))
                            {
                                var imagenes = Model.FirstOrDefault()?.Imagen.Split(',');
                                if (imagenes != null)
                                {
                                    foreach (var imagen in imagenes)
                                    {
                                        <div class="position-relative" style="width: 100px; height: 100px;">
                                            <img src="@imagen" alt="Imagen existente" style="width: 100%; height: 100%; object-fit: cover; border-radius: 5px;" />
                                            <button type="button" class="btn btn-danger btn-sm position-absolute top-0 start-0"
                                                    onclick="eliminarImagen(this, '@imagen')">
                                                X
                                            </button>
                                        </div>
                                    }
                                }
                            }
                        </div>

                        <!-- Campo oculto para imágenes eliminadas -->
                        <input type="hidden" id="imagenesAEliminar" name="imagenesAEliminar" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="procesarFormularioEditar()">Guardar Cambios</button>
                </div>
            </form>
        </div>
    </div>
</div>










<!-- Modal de confirmación -->
<div class="modal fade" id="confirmarEliminacionModal" tabindex="-1" aria-labelledby="confirmarEliminacionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #dc3545; color: white;">
                <h5 class="modal-title" id="confirmarEliminacionLabel">Confirmar eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas eliminar este producto? Esta acción no se puede deshacer.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" id="confirmarEliminarBtn" class="btn btn-danger">Eliminar</button>
            </div>
        </div>
    </div>
</div>



<script>

    document.getElementById('negocioSelector').addEventListener('change', function () {
        var negocioId = this.value;
        if (negocioId) {
            window.location.href = `/Vendedor/GestionarProductos?negocioId=${negocioId}`;
        }
    });


    function manejarGrupo(interruptorId, grupoId, inputId = null) {
        var interruptor = document.getElementById(interruptorId);
        var grupo = document.getElementById(grupoId);
        var input = inputId ? document.getElementById(inputId) : null;

        interruptor.addEventListener('change', function () {
            grupo.style.display = this.checked ? 'block' : 'none';
            if (!this.checked && input) {
                input.value = '';
            }
        });
    }

    manejarGrupo('porExpirar', 'fechaExpiracionGroup', 'fechaExpiracion');
    manejarGrupo('descuento', 'descuentoGroup', 'porcentajeDescuento');
    manejarGrupo('porExpirarEditar', 'fechaExpiracionGroupEditar', 'fechaExpiracionEditar');
    manejarGrupo('descuentoEditar', 'descuentoGroupEditar', 'porcentajeDescuentoEditar');


    function establecerFechaMinima(inputId) {
        var fechaInput = document.getElementById(inputId);
        var hoy = new Date();
        hoy.setDate(hoy.getDate() + 1);
        var fechaMinima = hoy.toISOString().split('T')[0];
        fechaInput.setAttribute('min', fechaMinima);
    }

    establecerFechaMinima('fechaExpiracion');
    establecerFechaMinima('fechaExpiracionEditar');

    function actualizarDetalleDescuento(precioInputId, descuentoInputId, labels) {
        const precioOriginal = parseFloat(document.getElementById(precioInputId).value) || 0;
        const porcentajeDescuento = parseFloat(document.getElementById(descuentoInputId).value) || 0;

        const montoDescuento = (precioOriginal * porcentajeDescuento) / 100;
        const precioFinal = precioOriginal - montoDescuento;

        document.getElementById(labels.precioOriginal).textContent = `S./ ${precioOriginal.toFixed(2)}`;
        document.getElementById(labels.porcentajeDescuento).textContent = `${porcentajeDescuento}%`;
        document.getElementById(labels.montoDescuento).textContent = `S./ ${montoDescuento.toFixed(2)}`;
        document.getElementById(labels.precioFinal).textContent = `S./ ${precioFinal.toFixed(2)}`;
    }

    // Usar esta función en añadir:
    document.getElementById('precioOriginal').addEventListener('input', () => {
        actualizarDetalleDescuento('precioOriginal', 'porcentajeDescuento', {
            precioOriginal: 'precioOriginalLabel',
            porcentajeDescuento: 'porcentajeDescuentoLabel',
            montoDescuento: 'montoDescuentoLabel',
            precioFinal: 'precioFinalLabel',
        });
    });

    document.getElementById('porcentajeDescuento').addEventListener('input', () => {
        actualizarDetalleDescuento('precioOriginal', 'porcentajeDescuento', {
            precioOriginal: 'precioOriginalLabel',
            porcentajeDescuento: 'porcentajeDescuentoLabel',
            montoDescuento: 'montoDescuentoLabel',
            precioFinal: 'precioFinalLabel',
        });
    });

    // Usar la misma función en editar:
    document.getElementById('precioOriginalEditar').addEventListener('input', () => {
        actualizarDetalleDescuento('precioOriginalEditar', 'porcentajeDescuentoEditar', {
            precioOriginal: 'precioOriginalLabelEditar',
            porcentajeDescuento: 'porcentajeDescuentoLabelEditar',
            montoDescuento: 'montoDescuentoLabelEditar',
            precioFinal: 'precioFinalLabelEditar',
        });
    });

    document.getElementById('porcentajeDescuentoEditar').addEventListener('input', () => {
        actualizarDetalleDescuento('precioOriginalEditar', 'porcentajeDescuentoEditar', {
            precioOriginal: 'precioOriginalLabelEditar',
            porcentajeDescuento: 'porcentajeDescuentoLabelEditar',
            montoDescuento: 'montoDescuentoLabelEditar',
            precioFinal: 'precioFinalLabelEditar',
        });
    });


    var editarProductoModal = document.getElementById('editarProductoModal');
    editarProductoModal.addEventListener('show.bs.modal', function (event) {
        var button = event.relatedTarget;


        var id = button.getAttribute('data-id');
        var nombre = button.getAttribute('data-nombre');
        var descripcion = button.getAttribute('data-descripcion');
        var precioOriginal = button.getAttribute('data-preciooriginal');
        var porcentajeDescuento = button.getAttribute('data-porcentajedescuento');
        var fechaExpiracion = button.getAttribute('data-fechaexpiracion');
        var imagenUrl = button.getAttribute('data-imagen');

        console.log('Fecha Expiración:', fechaExpiracion);


        document.getElementById('productoIdEditar').value = id;
        document.getElementById('nombreEditar').value = nombre;
        document.getElementById('descripcionEditar').value = descripcion;
        document.getElementById('precioOriginalEditar').value = precioOriginal;


        var descuentoCheckbox = document.getElementById('descuentoEditar');
        descuentoCheckbox.checked = porcentajeDescuento && porcentajeDescuento > 0;
        document.getElementById('descuentoGroupEditar').style.display = descuentoCheckbox.checked ? 'block' : 'none';
        document.getElementById('porcentajeDescuentoEditar').value = porcentajeDescuento || '';


        if (precioOriginal && porcentajeDescuento) {
            actualizarDetalleDescuento('precioOriginalEditar', 'porcentajeDescuentoEditar', {
                precioOriginal: 'precioOriginalLabelEditar',
                porcentajeDescuento: 'porcentajeDescuentoLabelEditar',
                montoDescuento: 'montoDescuentoLabelEditar',
                precioFinal: 'precioFinalLabelEditar',
            });
        }


        var porExpirarCheckbox = document.getElementById('porExpirarEditar');
        var fechaExpiracionInput = document.getElementById('fechaExpiracionEditar');
        var fechaExpiracionGroup = document.getElementById('fechaExpiracionGroupEditar');

        if (fechaExpiracion) {
            porExpirarCheckbox.checked = true;
            fechaExpiracionGroup.style.display = 'block';

            try {
                var partesFecha = fechaExpiracion.split(" ")[0].split("/");
                var fechaFormateada = `${partesFecha[2]}-${partesFecha[1]}-${partesFecha[0]}`;
                fechaExpiracionInput.value = fechaFormateada;
            } catch (error) {
                console.error("Error al convertir la fecha: ", error);
                fechaExpiracionInput.value = "";
            }
        } else {
            porExpirarCheckbox.checked = false;
            fechaExpiracionGroup.style.display = 'none';
            fechaExpiracionInput.value = '';
        }



        var imagenPreview = document.getElementById('imagenPreviewEditar');
        if (imagenUrl) {
            imagenPreview.src = imagenUrl;
            imagenPreview.style.display = 'block';
        } else {
            imagenPreview.style.display = 'none';
        }
    });

    let productoIdAEliminar = null;

    function confirmarEliminar(productoId) {
        productoIdAEliminar = productoId; // Almacenar el ID del producto a eliminar
        const modal = new bootstrap.Modal(document.getElementById('confirmarEliminacionModal'));
        modal.show(); // Mostrar el modal de confirmación
    }

    document.getElementById('confirmarEliminarBtn').addEventListener('click', function () {
        if (productoIdAEliminar) {
            // Redirigir al controlador utilizando el método GET
            window.location.href = `/Vendedor/EliminarProducto/${productoIdAEliminar}`;
        }
    });


    function previewImage(input, previewId) {
        var file = input.files[0];
        if (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var preview = document.getElementById(previewId);
                preview.src = e.target.result;
                preview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        }
    }

    // Función para previsualizar imágenes en el modal "Añadir Producto"
    let selectedFiles = [];

    function previsualizarImagenesAñadir(input) {
        const previewContainer = document.getElementById('previsualizacionAgregar');
        const hiddenInput = document.getElementById('imagenesSeleccionadas');
        const files = Array.from(input.files);

        files.forEach((file) => {
            selectedFiles.push(file);

            const reader = new FileReader();
            reader.onload = (e) => {
                const imgDiv = document.createElement('div');
                imgDiv.className = 'position-relative';
                imgDiv.style.width = '100px';
                imgDiv.style.height = '100px';

                const img = document.createElement('img');
                img.src = e.target.result;
                img.style.width = '100%';
                img.style.height = '100%';
                img.style.objectFit = 'cover';
                img.style.borderRadius = '5px';

                const removeBtn = document.createElement('button');
                removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 start-0';
                removeBtn.innerText = 'X';
                removeBtn.onclick = () => {
                    imgDiv.remove();
                    selectedFiles = selectedFiles.filter((f) => f !== file);
                    actualizarCampoOculto(hiddenInput);
                };

                imgDiv.appendChild(img);
                imgDiv.appendChild(removeBtn);
                previewContainer.appendChild(imgDiv);
            };
            reader.readAsDataURL(file);
        });

        actualizarCampoOculto(hiddenInput);

        input.value = ''; // Limpiar el input para permitir seleccionar nuevamente
    }

    function actualizarCampoOculto(hiddenInput) {
        const base64Images = [];
        selectedFiles.forEach((file) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                base64Images.push(e.target.result);
                hiddenInput.value = JSON.stringify(base64Images);
            };
            reader.readAsDataURL(file);
        });
    }


    const formData = new FormData();
    selectedFiles.forEach((file) => {
        formData.append('imagenes', file);
    });

    // Función para enviar todas las imágenes al backend
    document.getElementById('guardarProductoBtn').addEventListener('click', () => {
        const formData = new FormData();

        // Agregar todos los archivos seleccionados al FormData
        selectedFiles.forEach((file, index) => {
            formData.append(`imagenes[${index}]`, file);
        });

        // Agregar otros campos del formulario
        const formElements = document.querySelectorAll('#agregarProductoModal input, #agregarProductoModal textarea');
        formElements.forEach((el) => {
            if (el.name) {
                formData.append(el.name, el.value);
            }
        });

        // Enviar el FormData al backend mediante fetch
        fetch('/Vendedor/AgregarProducto', {
            method: 'POST',
            body: formData,
        })
            .then((response) => {
                if (response.ok) {
                    alert('Producto guardado con éxito.');
                    window.location.reload();
                } else {
                    alert('Error al guardar el producto.');
                }
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    });

    //function eliminarImagen(button, imagePath) {
    //    const container = button.parentElement;
    //    container.remove(); // Eliminar visualmente la imagen

    //    const hiddenInput = document.getElementById('imagenesAEliminar');
    //    const currentValue = hiddenInput.value ? hiddenInput.value.split(',') : [];
    //    currentValue.push(imagePath);
    //    hiddenInput.value = currentValue.join(','); // Actualizar el campo oculto
    //}


    //editar desde aquiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii

    function eliminarImagen(button, imagePath) {
        const container = button.parentElement;
        container.remove(); // Eliminar visualmente la imagen

        const hiddenInput = document.getElementById('imagenesAEliminar');
        const currentValue = hiddenInput.value ? hiddenInput.value.split(',') : [];
        currentValue.push(imagePath);
        hiddenInput.value = currentValue.join(','); // Actualizar el campo oculto
    }

    function previsualizarImagenesEditar(input) {
        const previewContainer = document.getElementById('previsualizacionEditar');
        const files = Array.from(input.files);

        files.forEach((file) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const imgDiv = document.createElement('div');
                imgDiv.className = 'position-relative';
                imgDiv.style.width = '100px';
                imgDiv.style.height = '100px';

                const img = document.createElement('img');
                img.src = e.target.result;
                img.style.width = '100%';
                img.style.height = '100%';
                img.style.objectFit = 'cover';
                img.style.borderRadius = '5px';

                const removeBtn = document.createElement('button');
                removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 start-0';
                removeBtn.innerText = 'X';
                removeBtn.onclick = () => imgDiv.remove();

                imgDiv.appendChild(img);
                imgDiv.appendChild(removeBtn);
                previewContainer.appendChild(imgDiv);
            };
            reader.readAsDataURL(file);
        });

        input.value = ''; // Limpiar el input para permitir nuevas selecciones
    }

    function procesarFormularioEditar() {
        const formData = new FormData();

        // Agregar ID del producto
        const productoId = document.getElementById('productoIdEditar').value;
        formData.append('id', productoId);

        // Agregar campos del formulario
        const formulario = document.querySelector('#formEditarProducto');
        Array.from(formulario.elements).forEach((input) => {
            if (input.name && input.type !== 'file') {
                formData.append(input.name, input.value);
            }
        });

        // Agregar imágenes nuevas
        const nuevasImagenes = document.getElementById('imagenesProductoEditar').files;
        Array.from(nuevasImagenes).forEach((file, index) => {
            formData.append(`nuevasImagenes[${index}]`, file);
        });

        // Agregar imágenes a eliminar
        const imagenesAEliminar = document.getElementById('imagenesAEliminar').value;
        if (imagenesAEliminar) {
            formData.append('imagenesAEliminar', imagenesAEliminar);
        }

        // Enviar datos al servidor
        fetch(formulario.action, {
            method: 'POST',
            body: formData,
        })
            .then((response) => {
                if (response.ok) {
                    alert('Producto actualizado con éxito');
                    window.location.reload();
                } else {
                    response.text().then((text) => {
                        console.error('Error:', text);
                        alert('Error al actualizar el producto');
                    });
                }
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('Error al actualizar el producto');
            });
    }

    function inicializarModalEditar(data) {
        // Asignar valores del producto al modal
        document.getElementById('productoIdEditar').value = data.id;
        document.getElementById('nombreEditar').value = data.nombre;
        document.getElementById('descripcionEditar').value = data.descripcion;
        document.getElementById('precioOriginalEditar').value = data.precioOriginal;

        // Manejo del interruptor de descuento
        const descuentoSwitch = document.getElementById('descuentoEditar');
        const descuentoGroup = document.getElementById('descuentoGroupEditar');
        if (data.porcentajeDescuento && data.porcentajeDescuento > 0) {
            descuentoSwitch.checked = true;
            descuentoGroup.style.display = 'block';
            document.getElementById('porcentajeDescuentoEditar').value = data.porcentajeDescuento;
        } else {
            descuentoSwitch.checked = false;
            descuentoGroup.style.display = 'none';
            document.getElementById('porcentajeDescuentoEditar').value = '';
        }

        // Manejo del interruptor de fecha de expiración
        const expiracionSwitch = document.getElementById('porExpirarEditar');
        const expiracionGroup = document.getElementById('fechaExpiracionGroupEditar');
        if (data.fechaExpiracion) {
            expiracionSwitch.checked = true;
            expiracionGroup.style.display = 'block';
            document.getElementById('fechaExpiracionEditar').value = data.fechaExpiracion.split('T')[0];
        } else {
            expiracionSwitch.checked = false;
            expiracionGroup.style.display = 'none';
            document.getElementById('fechaExpiracionEditar').value = '';
        }

        // Actualizar detalles del descuento
        actualizarDetalleDescuentoEditar();
    }

</script>

