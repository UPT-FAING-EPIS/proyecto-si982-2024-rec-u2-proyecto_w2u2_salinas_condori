name: Deploy Loopify Infrastructure on Azure

on:
  push:
    branches: [ "main" ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  Deploy-infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'


      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create terraform.tfvars
        run: |
          cd infra
          echo "suscription_id=\"${{ secrets.SUSCRIPTION_ID }}\"" > terraform.tfvars
          echo "sqladmin_username=\"${{ secrets.SQL_USER }}\"" >> terraform.tfvars
          echo "sqladmin_password=\"${{ secrets.SQL_PASS }}\"" >> terraform.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: cd infra && terraform init 

      - name: Terraform Validate
        run: cd infra && terraform validate -no-color

      - name: Terraform Plan
        run: cd infra && terraform plan -var="suscription_id=${{ secrets.SUSCRIPTION_ID }}" -var="sqladmin_username=${{ secrets.SQL_USER }}" -var="sqladmin_password=${{ secrets.SQL_PASS }}" -out main.tfplan

      - name: Terraform Apply
        run: cd infra && terraform apply -auto-approve main.tfplan

      # # Terramaid Setup and Run
      # - name: Outputs
      #   id: vars
      #   run: |
      #     echo "terramaid_version=$(curl -s https://api.github.com/repos/RoseSecurity/Terramaid/releases/latest | grep tag_name | cut -d '\"' -f 4)" >> $GITHUB_OUTPUT
      #     case "${{ runner.arch }}" in
      #     "X64" )
      #       echo "arch=x86_64" >> $GITHUB_OUTPUT
      #       ;;
      #     "ARM64" )
      #       echo "arch=arm64" >> $GITHUB_OUTPUT
      #       ;;
      #     esac

      # - name: Setup Go
      #   uses: actions/setup-go@v5
      #   with:
      #     go-version: 'stable'

      # - name: Setup Terramaid
      #   run: |
      #     curl -L -o /tmp/terramaid.tar.gz "https://github.com/RoseSecurity/Terramaid/releases/download/${{ steps.vars.outputs.terramaid_version }}/Terramaid_Linux_${{ steps.vars.outputs.arch }}.tar.gz"
      #     tar -xzvf /tmp/terramaid.tar.gz -C /tmp
      #     mv -v /tmp/Terramaid /usr/local/bin/terramaid
      #     chmod +x /usr/local/bin/terramaid

      # # Terramaid Setup and Run
      - name: Outputs
        id: vars
        run: |
          # Obtener versión sin 'v' al inicio
          version=$(curl -s https://api.github.com/repos/RoseSecurity/Terramaid/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/v//')
          echo "terramaid_version=$version" >> $GITHUB_OUTPUT

          # Detectar arquitectura correctamente
          arch=$(uname -m)
          if [ "$arch" = "x86_64" ]; then
            echo "arch=x86_64" >> $GITHUB_OUTPUT
          elif [ "$arch" = "aarch64" ]; then
            echo "arch=arm64" >> $GITHUB_OUTPUT
          else
            echo "Unsupported architecture: $arch"
            exit 1
          fi

      - name: Setup Terramaid
        run: |
          # Descargar y configurar Terramaid
          echo "Descargando Terramaid versión ${{ steps.vars.outputs.terramaid_version }} para ${{ steps.vars.outputs.arch }}"
          curl -L -o /tmp/terramaid.tar.gz "https://github.com/RoseSecurity/Terramaid/releases/download/v${{ steps.vars.outputs.terramaid_version }}/Terramaid_Linux_${{ steps.vars.outputs.arch }}.tar.gz"
          tar -xzvf /tmp/terramaid.tar.gz -C /tmp
          sudo mv -v /tmp/Terramaid /usr/local/bin/terramaid
          sudo chmod +x /usr/local/bin/terramaid
      

      - name: Run Terramaid
        run: |
          cd infra
          /usr/local/bin/terramaid run

      - name: Publish Terramaid Graph
        run: |
          echo "## Terramaid Graph" >> $GITHUB_STEP_SUMMARY
          cat infra/Terramaid.md >> $GITHUB_STEP_SUMMARY 

      # Inframap Setup and Run
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2

      - name: Setup Inframap
        run: |
          curl -L -o /tmp/inframap.tar.gz "https://github.com/cycloidio/inframap/releases/download/v0.7.0/inframap-linux-amd64.tar.gz"
          tar -xzvf /tmp/inframap.tar.gz -C /tmp
          mv -v /tmp/inframap-linux-amd64 /usr/local/bin/inframap
          chmod +x /usr/local/bin/inframap

      - name: Run Inframap
        run: |
          cd infra
          /usr/local/bin/inframap generate main.tf --raw | dot -Tsvg > inframap_azure.svg

      - name: Upload Inframap Graph
        uses: actions/upload-artifact@v4
        with:
          name: inframap_azure.svg
          path: infra/inframap_azure.svg

      # Infracost Setup and Run
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Run Infracost
        run: |
          cd infra
          infracost breakdown --path . --format html --out-file infracost-report.html
          sed -i '19,137d' infracost-report.html
          sed -i 's/$0/$ 0/g' infracost-report.html

      - name: Convert HTML to Markdown
        id: html2markdown
        uses: rknj/html2markdown@v1.1.0
        with:
          html-file: "infra/infracost-report.html"

      - name: Upload Infracost Report
        run: |
          echo "## Infracost Report" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.html2markdown.outputs.markdown-content }}" >> infracost.md
          cat infracost.md >> $GITHUB_STEP_SUMMARY
